{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://E%3A/task%20manager%20app/task-management-app/app/models/Task.js"],"sourcesContent":["// models/Task.js\r\nimport mongoose from \"mongoose\";\r\n\r\nconst TaskSchema = new mongoose.Schema({\r\n  title: { type: String, required: true },\r\n  description: { type: String },\r\n  dueDate: { type: Date },\r\n  priority: { type: String, enum: [\"High\", \"Medium\", \"Low\"], required: true },\r\n  completed: { type: Boolean, default: false },\r\n  createdAt: {type: Date, default: Date.now()}\r\n});\r\n\r\n\r\nconst Task = mongoose.models.Task || mongoose.model(\"Task\", TaskSchema);\r\n\r\nexport default Task;\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;AACjB;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,aAAa;QAAE,MAAM;IAAO;IAC5B,SAAS;QAAE,MAAM;IAAK;IACtB,UAAU;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAQ;YAAU;SAAM;QAAE,UAAU;IAAK;IAC1E,WAAW;QAAE,MAAM;QAAS,SAAS;IAAM;IAC3C,WAAW;QAAC,MAAM;QAAM,SAAS,KAAK,GAAG;IAAE;AAC7C;AAGA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE7C","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file://E%3A/task%20manager%20app/task-management-app/app/api/tasks/%5Bid%5D/route.js"],"sourcesContent":["// app/api/tasks/route.js\r\nimport { NextResponse } from \"next/server\";\r\nimport mongoose from \"mongoose\";\r\nimport Task from \"@/app/models/Task\";\r\n\r\n// Connect to MongoDB\r\nasync function connectDB() {\r\n    try {\r\n      const status = await mongoose.connect(process.env.MONGODB_URL);\r\n  \r\n      console.log(`MongoDB connected: ${status.connection.host}`);\r\n    } catch (error) {\r\n      console.log(`DB Error: ${error.message}`);\r\n  \r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n// GET all tasks or filter by status\r\nexport async function GET(req) {\r\n  await connectDB();\r\n  const { searchParams } = new URL(req.url);\r\n  const filter = searchParams.get(\"status\");\r\n  let query = {};\r\n  if (filter === \"completed\") query.completed = true;\r\n  if (filter === \"pending\") query.completed = false;\r\n  const tasks = await Task.find(query);\r\n  return NextResponse.json(tasks);\r\n}\r\n\r\n// POST a new task\r\nexport async function POST(req) {\r\n  await connectDB();\r\n  const { title, description, dueDate, priority, completed } = await req.json();\r\n  const newTask = new Task({ title, description, dueDate, priority, completed });\r\n  await newTask.save();\r\n  return NextResponse.json(newTask);\r\n}\r\n\r\n// DELETE a task with confirmation\r\nexport async function DELETE(req,context) {\r\n  await connectDB();\r\n  try {\r\n    const { id } = await context.params;\r\n    if (!id) {\r\n      return NextResponse.json({ error: \"Task ID is required\" }, { status: 400 });\r\n    }\r\n  \r\n    await Task.findByIdAndDelete(id);\r\n    return NextResponse.json({ message: \"Task deleted successfully\" });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: error.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n// UPDATE a task (mark as completed or update details)\r\nexport async function PUT(req, context) {\r\n  await connectDB();\r\n  const { id } = await context.params;\r\n  const { title, description, dueDate, priority, completed } = await req.json();\r\n  const updatedTask = await Task.findByIdAndUpdate(\r\n    id,\r\n    { title, description, dueDate, priority, completed },\r\n    { new: true }\r\n  );\r\n  return NextResponse.json(updatedTask);\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;;;AACzB;AACA;AACA;;;;AAEA,qBAAqB;AACrB,eAAe;IACX,IAAI;QACF,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW;QAE7D,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,OAAO,UAAU,CAAC,IAAI,EAAE;IAC5D,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,MAAM,OAAO,EAAE;QAExC,QAAQ,IAAI,CAAC;IACf;AACF;AAGK,eAAe,IAAI,GAAG;IAC3B,MAAM;IACN,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,IAAI,QAAQ,CAAC;IACb,IAAI,WAAW,aAAa,MAAM,SAAS,GAAG;IAC9C,IAAI,WAAW,WAAW,MAAM,SAAS,GAAG;IAC5C,MAAM,QAAQ,MAAM,uHAAA,CAAA,UAAI,CAAC,IAAI,CAAC;IAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,eAAe,KAAK,GAAG;IAC5B,MAAM;IACN,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,IAAI;IAC3E,MAAM,UAAU,IAAI,uHAAA,CAAA,UAAI,CAAC;QAAE;QAAO;QAAa;QAAS;QAAU;IAAU;IAC5E,MAAM,QAAQ,IAAI;IAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,eAAe,OAAO,GAAG,EAAC,OAAO;IACtC,MAAM;IACN,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,MAAM;QACnC,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,uHAAA,CAAA,UAAI,CAAC,iBAAiB,CAAC;QAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA4B;IAClE,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF;AAGO,eAAe,IAAI,GAAG,EAAE,OAAO;IACpC,MAAM;IACN,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,MAAM;IACnC,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,IAAI;IAC3E,MAAM,cAAc,MAAM,uHAAA,CAAA,UAAI,CAAC,iBAAiB,CAC9C,IACA;QAAE;QAAO;QAAa;QAAS;QAAU;IAAU,GACnD;QAAE,KAAK;IAAK;IAEd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}}]
}